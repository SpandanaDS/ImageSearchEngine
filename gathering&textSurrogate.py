# -*- coding: utf-8 -*-
"""newAssignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L66ysoauy0slX0SNi-D-Ipwyb1u_PVRM
"""

import requests
import os
import json
from whoosh.index import create_in
from whoosh.fields import Schema, TEXT, ID
from whoosh.qparser import QueryParser
from whoosh.query import Term, And, Every
from whoosh.analysis import StemmingAnalyzer

# Replace 'YOUR_API_KEY' with your actual Pexels API key
API_KEY = 'YJoqFqpLhHpraJFvnd4jfzZD3QRK3nLxiY6wQgqprrqPFsLxwRAsTUB4'

# Function to search for images on Pexels and retrieve metadata including tags
def search_pexels_with_tags(query, page=1, per_page=10):
    url = f'https://api.pexels.com/v1/search?query={query}&page={page}&per_page={per_page}'
    headers = {'Authorization': API_KEY}
    response = requests.get(url, headers=headers)
    data = response.json()
    return data['photos'] if 'photos' in data else []

# Function to save image URLs and tags to JSON
def save_images_and_tags_to_json(image_list, json_file):
    data = [{'ID': image['id'], 'url': image['src']['original'], 'tags': image['alt']} for image in image_list]
    with open(json_file, 'w') as f:
        json.dump(data, f, indent=4)

if __name__ == "__main__":
    total_images = 1500
    images_per_page = 80  # Adjust per_page according to your needs
    query = 'background' # Example query

    all_images = []
    downloaded_images = 0
    page = 1

    # Fetch images and tags from Pexels
    while downloaded_images < total_images:
        image_list = search_pexels_with_tags(query, page=page, per_page=images_per_page)
        print(f"Page {page}: Fetched {len(image_list)} images")
        all_images.extend(image_list)
        downloaded_images += len(image_list)
        page += 1
        if len(image_list) < images_per_page:
            break

    # Save image URLs and tags to JSON
    save_images_and_tags_to_json(all_images, 'images_with_tags.json')

    print(f'Total images downloaded: {downloaded_images}')



# Function to get the length of JSON file
def get_json_file_length(json_file):
    with open(json_file, 'r') as f:
        data = json.load(f)
    return len(data)

# Example usage
json_file = 'images_with_tags.json'
length = get_json_file_length(json_file)
print(f'Length of JSON file "{json_file}": {length}')



# Function to load images data from JSON file
def load_images_data(json_file):
    with open(json_file, 'r') as f:
        images_data = json.load(f)
    return images_data

# Function to prepare textual surrogates from images data
def prepare_textual_surrogates(images_data):
    textual_surrogates = {}
    for image_info in images_data:
        image_id = image_info.get('ID', '')  # Get the image ID
        url = image_info.get('url', '')
        tags = image_info.get('tags', '')
        textual_surrogate = tags
        textual_surrogates[image_id] = {'url': url, 'textual_surrogate': textual_surrogate}  # Store URL and textual surrogate
    return textual_surrogates

# Load images data from JSON file
images_data = load_images_data('images_with_tags.json')

# Prepare textual surrogates
textual_surrogates = prepare_textual_surrogates(images_data)

# Write textual surrogates to a JSON file
with open('textual_surrogates.json', 'w') as f:
    json.dump(textual_surrogates, f, indent=4)

